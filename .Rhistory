library(splines)
library(lme4)
library(nlme)
setwd("C:/Users/tianx/Documents/1tianx/1R-code/Data")
BMACS <-  read.table("BMACS.txt"  ,header=T)[,2:7]
str(BMACS)
head(BMACS)
CD4fit1 <- lme(CD4~ Time , random=~1 |ID, data= BMACS)
summary(CD4fit1 )
CD4fit2 <- lme(CD4~ Time , random=~Time |ID, data= BMACS)
summary(CD4fit2 )
library(lme4)
CD4fit2b <- lmer(CD4~ Time + (Time|ID), data= BMACS)
summary(CD4fit2b )
# random intercept
CD4fit1 <- lme(CD4~ Time , random=~1 |ID, data= BMACS)
summary(CD4fit1 )
CD4fit2 <- lme(CD4~ Time , random=~Time |ID, data= BMACS)
summary(CD4fit2 )
anova(CD4fit1, CD4fit2)
? save
getwd()
save(BMACS,  file = "BMACS.RData")
head(BMACS, 20)
head(BMACS, 40)
setwd("C:/Users/tianx/Documents/1tianx/1R-code/Data")
HSCT <- read.table( file = "HSCT.txt", header=T)
str(HSCT)
names(HSCT)
names(HSCT)<- c("ID", "Days",  "Granu", "LYM" ,  "MON",   "G-CSF", "IL-15", "MCP-1")
str(HSCT)
HSCT[HSCT$ID==1,]
summary(HSCT$Granu)
summary(HSCT$LYM)
summary(HSCT$MON)
save(HSCT,  file = "HSCT.RData")
library(npmlda)
? BMACS
? HSCT
str(BMACS)
str(HSCT)
? Kh.Ep
Kh.Ep <- function(datavec, Bndwdth) {
KH <- numeric(length(datavec))
xh<- datavec/Bndwdth
Ind<- ( abs(xh) >=1 )
KH[Ind] <- 0
KH[!Ind] <- 0.75*(1-xh[!Ind]^2)/Bndwdth
KH
}
Kh.Ep(1:5, 1 )
Kh.Ep(1:10, 2)
Kh.Ep(1:10, 5)
Kh.Ep(1:7, 5)
devtools::load_all("~/1tianx/1R-code/npmlda")
library(npmlda)
library(npmlda)
? Kh.Ep
? Kh.Bw
? Kh.Bw
? Kh.Nm
library(npmlda)
Kh.Nm  <- function(datavec, Bndwdth) {
KH <- numeric(length(datavec))
xh<- datavec/Bndwdth
KH <- dnorm(xh, 0, 1)/Bndwdth
KH
}
library(npmlda)
devtools::load_all("~/1tianx/1R-code/npmlda")
library(roxygen2)
library(npmlda)
s()
ls()
library(npmlda)
lm
devtools::load_all(".")
Kh.Ep <- function(datavec, Bndwdth) {
KH <- numeric(length(datavec))
xh<- datavec/Bndwdth
Ind<- ( abs(xh) >=1 )
KH[Ind] <- 0
KH[!Ind] <- 0.75*(1-xh[!Ind]^2)/Bndwdth
KH
}
rm(Kh.Ep)
Kh.Ep
Kh.Ep(2:7,5)
Kh.Bw(2:7,5)
Kh.N,(2:7,5)
Kh.Nm(2:7,5)
? cor.test
devtools::load_all(".")
X<-100
X<-1: 100
Y<- normal(X)
Y<- (X-50)^3
X <- 1:100
Y <- (X-50)^3 - 10*(X-50)^2 + 100
plot(X, Y)
X <- seq(0, 1, 100)
Y <- (X-50)^3 - 10*(X-50)^2
plot(X,Y)
X <- seq(0, 1, len=100)
Y <- (X-50)^3 - 10*(X-50)^2
plot(X,T)
plot(X,Y)
X <- seq(0, 1, len=100)
Y <- (X- 0.5)^3 - 2*(X-0.5)^2+ 3
plot(X,T)
plot(X,Y)
X <- seq(0, 1, len=100)
Y <- (X- 0.5)^3 - 2*(X-0.5)^2+ 3
plot(X,Y, lty="l")
X <- seq(0, 1, len=100)
Y <- (X- 0.5)^3 - 2*(X-0.5)^2+ 3
plot(X,Y, type="l")
X <- seq(0, 1, len=100)
Y <- (X- 0.5)^3 - 2*(X-0.5)^2+ rnorm(100)
plot(X,Y, type="l")
X <- seq(0, 1, len=100)
Y <- (X- 0.5)^3 - 2*(X-0.5)^2+ rnorm(100, 0, 0.2)
plot(X,Y, type="l")
X <- seq(0, 1, len=100)
Y <- (X- 0.5)^3 - (X-0.5)^2+ rnorm(100, 0, 0.2)
plot(X,Y, type="l")
abline(lowess(X,Y))
abline(lowess(X,Y), col=2)
X <- seq(0, 1, len=100)
Y <- (X- 0.5)^3 - (X-0.5)^2+ rnorm(100, 0, 0.2)
plot(X,Y, type="l")
lines(lowess(X,Y), col=2)
X <- seq(0, 1, len=100)
Y <- (X- 0.5)^3 - (X-0.5)^2+ rnorm(100, 0, 0.1)
plot(X,Y, type="l")
lines(lowess(X,Y), col=2)
X <- seq(0, 1, len=100)
Y <- 2*(X- 0.5)^3 - (X-0.5)^2+ rnorm(100, 0, 0.1)
plot(X,Y, type="l")
lines(lowess(X,Y), col=2)
X <- seq(0, 1, len=100)
Y <- (X- 0.5)^3 - (X-0.5)^2+ rnorm(100, 0, 0.1)
plot(X,Y, type="l")
lines(lowess(X,Y), col=2)
X <- seq(0, 1, len=100)
Y <- (X- 0.5)^3 + (X-0.5)^2+ rnorm(100, 0, 0.1)
plot(X,Y, type="l")
lines(lowess(X,Y), col=2)
X <- seq(0, 1, len=100)
Y <- (X- 0.5)^3 - 2*(X-0.5)^2+ rnorm(100, 0, 0.1)
plot(X,Y, type="l")
lines(lowess(X,Y), col=2)
NW.WtKernel(X,  Y,  Wt=1, X0=0.5, BAND=0.3 )
NW.WtKernel(X,  Y,  Wt=1, X0=0.5, Bndwdth=0.3 )
X <- seq(0, 1, len=100)
Y <- (X- 0.5)^3 - 2*(X-0.5)^2+ rnorm(100, 0, 0.1)
NW.WtKernel(X,  Y,  Wt=1, X0=0.5, Bndwdth=0.3 )
NW.WtKernel(X,  Y,   X0=0.5, Bndwdth=0.3, Kernel="Ep", Wt=1 )
#'
NW.WtKernel(X,  Y,   X0=0.5, Bndwdth=0.3, Kernel="Nm", Wt=1 )
NW.WtKernel(X,  Y,   X0=0.5, Bndwdth=0.3, Kernel="Bw", Wt=1 )
X <- seq(0, 1, len=100)
Y <- (X- 0.5)^3 - 2*(X-0.5)^2+ rnorm(100, 0, 0.1)
NW.WtKernel(X, Y,  X0=0.5, Kernel="Ep", Bndwdth=0.3, Wt=1 )
NW.WtKernel(X, Y,  X0=0.5, Kernel="Nm", Bndwdth=0.3, Wt=1 )
plot(X,T)
plot(X,Y)
points(0.5,  NW.WtKernel(X, Y,  X0=0.5, Kernel="Ep", Bndwdth=0.3, Wt=1 ), cex=2, col=2)
points(0.5,  NW.WtKernel(X, Y,  X0=0.5, Kernel="Bw", Bndwdth=0.3, Wt=1 ), cex=2,pch=16, col=3)
points(0.5,  NW.WtKernel(X, Y,  X0=0.5, Kernel="Nm", Bndwdth=0.3, Wt=1 ), cex=2,pch=16, col=4)
library(npmlda)
search()
Kh.Bw(2:7,5)
Kh.Bw
base::Kh.Bw
Kh.Bw(2:7,5)
Kh.Nm(2:7,5)
Kh.Ep(2:7,5)
library(npmlda)
library(npmlda)
devtools::release()
devtools::load_all(".")
getwd()
devtools::load_all(".")
search()
devtools::release()
install.packages("inconsolata ")
install.packages("inconsolata")
library(inconsolata)
devtools::release()
devtools::release()
devtools::release()
use_cran_comments()
devtools::use_cran_comments()
devtools::release()
Cite()
cite()
citation()
getwd()
BDIdata<-read.table(file="C:/Users/tianx/Documents/1tianx/1R-code/data/BDIdata.txt", head=T)
dim(BDIdata);
dim(BDIdata);
BDI.firstob <- do.call("rbind", as.list(by(BDIdata, BDIdata$ID, head,  n=1)))
dim(BDI.firstob) #557
table(BDI.firstob$med.time)
BDIdata$med <- with(BDIdata, ifelse(  time >=med.time, 1,0))
BDIdata <- BDIdata[, c(1,2,3,5,4)]
str(BDIdata)
BDIdata[BDIdata$ID==1,]
save(BDIdata,  file = "BDIdata.RData")
devtools::load_all(".")
devtools::load_all(".")
library(npmlda)
LocalLm.X0 <- function(Xvec, Yvec, X0, Bndwdth , Wt=1)
{
Xi0 <- Xvec- X0
Wi  <- Kh(Xi0,Bndwdth ) * Wt
Sn2 <- sum(Wi*Xi0^2)
Sn1 <- sum(Wi*Xi0 )
Est0 <- (Sn2*sum(Wi*Yvec)-Sn1*sum(Wi*Xi0*Yvec))/(Sn2*sum(Wi)-Sn1^2)
Est0
}
Kh.Ep
LocalLm.X0 <- function(Xvec, Yvec, X0, Bndwdth , Wt=1)
{
Xi0 <- Xvec- X0
Wi  <- Kh.Ep(Xi0,Bndwdth ) * Wt
Sn2 <- sum(Wi*Xi0^2)
Sn1 <- sum(Wi*Xi0 )
Est0 <- (Sn2*sum(Wi*Yvec)-Sn1*sum(Wi*Xi0*Yvec))/(Sn2*sum(Wi)-Sn1^2)
Est0
}
LocalLm <- function(Xint, Xvec, Yvec, bw , Wt=1)
{
nID <- length(Xint)
Yfit <- numeric(nID)
for (i in 1:nID)
{
X1  <-  Xint[i]
Yfit[i] <- LocalLm.X0(Xvec,  Yvec, X1, Bndwdth=bw , Wt)
}
Yfit
}
Ct <- data.frame(table(BMACS$ID))
names(Ct)<- c("ID", "ni")
BMACS<- merge(BMACS, Ct, by= "ID")
str(BMACS)
LocalLm
LocalFit.Y <- with(BMACS, LocalLm(Time.int, Time, CD4, bw=0.9, Wt=1/ni))
Time.int<- seq(0.1,5.9,  by=0.1)
LocalFit.Y <- with(BMACS, LocalLm(Time.int, Time, CD4, bw=0.9, Wt=1/ni))
plot(CD4 ~ Time, data = BMACS,
xlab = "Time since infection(years)",
ylab = "CD4 percentage", cex=0.3, col="gray70", main="")
lines(Time.int, LocalFit.Y, lwd=2.5, col=1)
str(BMACS)
with(BMACS, summary(ni))
data(BMACS)
Time.int<- seq(0.1,5.9,  by=0.1)
LocalFit.Y <- with(BMACS, LocalLm(Time.int, Time, CD4, bw=0.9, Wt=1))
LocalFit.Y
data(BMACS)
Time.int<- seq(0.1,5.9,  by=0.1)
LocalFit.Y <- with(BMACS, LocalLm(Time.int, Time, CD4, bw=0.9, Wt=1))
library(npmlda)
library(npmlda)
X <- seq(0, 1, len=100)
Y <- (X- 0.5)^3 - 2*(X-0.5)^2+ rnorm(100, 0, 0.1)
NW.WtKernel(X, Y,  X0=0.5, Kernel="Ep", Bndwdth=0.3, Wt=1 )
NW.WtKernel(X, Y,  X0=0.5, Kernel="Nm", Bndwdth=0.3, Wt=1 )
kernel.fit(seq(0,1,0.1), X, Y, Kernel="Ep", Bndwdth=0.3, Wt=1   )
devtools::load_all(".")
kernel.fit(seq(0,1,0.1), X, Y, Kernel="Ep", Bndwdth=0.3, Wt=1   )
kernel.fit(seq(0,1,0.1), X, Y, Kernel="Ep", bw=0.3, Wt=1   )
devtools::load_all(".")
kernel.fit(seq(0,1,0.1), X, Y, Kernel="Ep", bw=0.3, Wt=1   )
kernel.fit(seq(0,1,0.1), X, Y, Kernel="Ep", bw=0.3, Wt=1   )
plot(X,Y)
lines( seq(0,1,0.1), kernel.fit(seq(0,1,0.1), X, Y, Kernel="Ep", bw=0.3, Wt=1   ))
lines( seq(0,1,0.1), kernel.fit(seq(0,1,0.1), X, Y, Kernel="Ep", bw=0.2, Wt=1   ))
lines( seq(0,1,0.1), kernel.fit(seq(0,1,0.1), X, Y, Kernel="Ep", bw=0.1, Wt=1   ))
plot(X,Y)
lines( seq(0,1,0.1), kernel.fit(seq(0,1,0.1), X, Y, Kernel="Ep", bw=0.2, Wt=1   ))
lines( seq(0,1,0.1), kernel.fit(seq(0,1,0.1), X, Y, Kernel="Ep", bw=0.1, col=2 Wt=1   ))
lines( seq(0,1,0.1), kernel.fit(seq(0,1,0.1), X, Y, Kernel="Ep", bw=0.1,  Wt=1   ), col=2)
library(npmlda)
library(npmlda)
ls()
rm(list = ls())
library(npmlda)
devtools::release()
coef()
coef
devtools::release()
library(npmlda)
devtools::load_all(".")
library(npmlda)
library(npmlda)
getwd()
? lm
devtools::load_all(".")
library(npmlda)
data(NGHS)
NGHS$Black <- (NGHS$RACE==2)*1
NGHS<- NGHS[!is.na(NGHS$SBP) & !is.na(NGHS$BMIPCT) & !is.na(NGHS$HTPCT ),]
nrow(NGHS) #19320
Ct <-   data.frame(table(NGHS$ID))
names(Ct)<- c('ID', 'ni')
NGHS<- merge(NGHS, Ct, by= 'ID')
nID<- dim(Ct)[1] #2376
nID
Age.grid <- seq(9, 19, by=0.5) #21
NGHS$HTPCTc<- NGHS$HTPCT-50
NGHS$BMIPCTc<- NGHS$BMIPCT-50
Beta <- with(NGHS, LocalLm.Beta(Age.grid, AGE, X1=Black,
X2=HTPCTc, X3=BMIPCTc, SBP, Bndwdth=3.5, Weight=1/ni))
LocalLm.Beta<- function(newT, Tvec, X1, X2, X3, Yvec, Bndwdth, Weight )
{
nt<- length(newT)
Beta.Vec<- matrix(NA, ncol=4, nrow=nt)
for (i in 1:nt)
{
t1  <- newT[i]
Beta.Vec[i,] <-   LocalLm.Beta.t0( t1, Tvec, X1, X2, X3, Yvec, Bndwdth, Weight)
}
Beta.Vec
}
Beta <- with(NGHS, LocalLm.Beta(Age.grid, AGE, X1=Black,
+                                 X2=HTPCTc, X3=BMIPCTc, SBP, Bndwdth=3.5, Weight=1/ni))
Beta <- with(NGHS, LocalLm.Beta(Age.grid, AGE, X1=Black,  X2=HTPCTc, X3=BMIPCTc, SBP, Bndwdth=3.5, Weight=1/ni))
data(NGHS)
NGHS$Black <- (NGHS$RACE==2)*1
NGHS<- NGHS[!is.na(NGHS$SBP) & !is.na(NGHS$BMIPCT) & !is.na(NGHS$HTPCT ),]
Ct <-   data.frame(table(NGHS$ID))
names(Ct)<- c('ID', 'ni')
NGHS<- merge(NGHS, Ct, by= 'ID')
nID<- dim(Ct)[1]
Age.grid <- seq(9, 19, by=0.5) #21
NGHS$HTPCTc<- NGHS$HTPCT-50
NGHS$BMIPCTc<- NGHS$BMIPCT-50
Beta <- with(NGHS, LocalLm.Beta(Age.grid, AGE, X1=Black, X2=HTPCTc, X3=BMIPCTc, SBP, Bndwdth=3.5, Weight=1/ni))
Beta
library(npmlda)
library(npmlda)
NW.WtKernel
library(npmlda)
library(npmlda)
NW.WtKernel
Kh2D  <- function(datavec1,datavec2, Bndwdth1, Bndwdth2) {
KH1 <-  numeric(length(datavec1))
KH2 <-  numeric(length(datavec2))
u1 <- datavec1/Bndwdth1
u2 <- datavec2/Bndwdth2
# For each row of (u1i, u2i) is the vector input for bandwith function
Ind1<- ( abs(u1 ) >=1 )
Ind2<- ( abs(u2 ) >=1 )
KH1[Ind1] <- 0
KH1[!Ind1] <- 0.75*(1-u1[!Ind1]^2)/Bndwdth1
KH2[Ind2] <- 0
KH2[!Ind2] <- 0.75*(1-u2[!Ind2]^2)/Bndwdth2
KH<- KH1*KH2
KH
}
Kh2D(2:7, 2:7, 5, 4)
Kh2D(2:7, 2:7, 3, 4)
Kh2D(2:7, 2:7, 5, 5)
Kh2D(2:7, 2:7, 5, 5)
Kernel2D
library(npmlda)
Xi(c(0, -10000, -10,-5))
Xi<- function(s)
{
s<- as.vector(s)
Xi <- numeric(length(s))
Xi[s == 0]  <-  0.5
Xi[s > 200] <-  0
Xi[s < -200] <-  1
Ind<- ( s !=0 & abs(s)<=200)
si <- s[Ind]
Xi[Ind] <-  ((si -1)*exp(si)+1)/(exp(si)-1)^2
Xi
}
Xi(c(0, -10000, -10,-5))
Xi(c(-10000, -10,-5, 0, 5,10, 10000 ))
Xi(c(-1000, -10,-5, 0, 5,10, 1000 ))
Xi(0)
DXi(c(-1000, -10,-5, 0, 5,10, 1000 ))
DXi<- function(s)
{
s<- as.vector(s)
DXi <- numeric(length(s))
DXi[s == 0]  <-  1/6
DXi[abs(s) > 200 ] <-   0
Ind<- ( s != 0 & abs(s)<=200)
si <- s[Ind]
DXi[Ind] <-  (exp(si)*(si-2)+si+2)*exp(si)/(exp(si)-1)^3
DXi
}
DXi(c(-1000, -10,-5, 0, 5,10, 1000 ))
Newton2var<- function(Zij, b0 , Ub, Indicator, difflmt=1e-14, MaxIter=100)
{
i<- 0
#Initial the 3*3 Jacobian matrix.
DU<- matrix(0, 2,2)
while( (t(Ub)%*%Ub)  >  difflmt)
{
diag(DU) <- c( sum(Zij[,1]^2* DXi(Zij%*%b0)), sum(Zij[,2]^2* DXi(Zij%*%b0)) )
DXi.Z    <- DXi(Zij%*%b0) ; #nT*nT*1
DU[1,2]  <-  sum(Zij[,1]*Zij[,2]* DXi.Z )
DU[2,1]  <-  sum(Zij[,1]*Zij[,2]* DXi.Z )
Delta <- solve(DU, Ub)
# newton update
b0 <-   b0 - Delta
i<- i+1
if(i > MaxIter)
{
print('Stopped after maximum iteration')
return (b0 )
break
}
Diff<-  as.vector(Indicator)*1-  Xi(Zij%*%b0); #nT*nT*1
U1  <-  sum(Zij[,1]* Diff)
U2  <-  sum(Zij[,2]* Diff)
Ub <- c(U1, U2)
}
#------------------------------------------------------------
#output results
b0
}
library(npmlda)
Xi
library(npmlda)
Kh3D
library(npmlda)
library(npmlda)
install.packages(devtools)
install.packages("devtools")
library(devtools)
library(npmlda)
NGHS
library(npmlda)
library(npmlda)
library(npmlda)
library(npmlda)
Xi()
Xi
install.packages("roxygen2")
library(roxygen2)
library(npmlda)
library(npmlda)
library(npmlda)
library(npmlda)
